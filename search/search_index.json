{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HOME \u00b6 Program written in Python 3 using mkdocs-material Python package for building a personal blog. TOOLS \u00b6 Material for MkDocs FEATURES \u00b6 Automated listed pages in a directory HOW TO INSTALL: \u00b6 Requirements: \u00b6 See requirement.txt file How to install and run application: \u00b6 Use commands: * pip install mkdocs-material Run: Going to terminal and run * mkdocs serve Deploy to Github Pages \u00b6 Make sure that the directory is versioned by git Go to terminal and run mkdocs gh-deploy HOW TO ADD NEW PAGES AND CUSTOMISE LOOK \u00b6 Add a .md file in docs repo Add route to the file in mkdocs.yml","title":"HOME"},{"location":"#home","text":"Program written in Python 3 using mkdocs-material Python package for building a personal blog.","title":"HOME"},{"location":"#tools","text":"Material for MkDocs","title":"TOOLS"},{"location":"#features","text":"Automated listed pages in a directory","title":"FEATURES"},{"location":"#how-to-install","text":"","title":"HOW TO INSTALL:"},{"location":"#requirements","text":"See requirement.txt file","title":"Requirements:"},{"location":"#how-to-install-and-run-application","text":"Use commands: * pip install mkdocs-material Run: Going to terminal and run * mkdocs serve","title":"How to install and run application:"},{"location":"#deploy-to-github-pages","text":"Make sure that the directory is versioned by git Go to terminal and run mkdocs gh-deploy","title":"Deploy to Github Pages"},{"location":"#how-to-add-new-pages-and-customise-look","text":"Add a .md file in docs repo Add route to the file in mkdocs.yml","title":"HOW TO ADD NEW PAGES AND CUSTOMISE LOOK"},{"location":"about/","text":"About me \u00b6 My CV \u00b6","title":"About me"},{"location":"about/#about-me","text":"","title":"About me"},{"location":"about/#my-cv","text":"","title":"My CV"},{"location":"Blogs/ai/rl/","text":"Reinforce learning and its application to OR problems \u00b6","title":"Reinforce learning and its application to OR problems"},{"location":"Blogs/ai/rl/#reinforce-learning-and-its-application-to-or-problems","text":"","title":"Reinforce learning and its application to OR problems"},{"location":"Blogs/misc/confluence/","text":"Why using confluence? \u00b6 Nowadays, every company faces a problem of building knowledge-management system. Building such system is not only important for enhancing collaborations in project teams, increase productivity and efficiency of staff but also the platform for showcase its capacities to potential customers. Introduction \u00b6 Concepts \u00b6 Spaces \u00b6 There are three types of spaces: personal space, team space and public space. Pages \u00b6 A page can be created within each space for documentation and so on. Features \u00b6 Create spaces for documentation, knowledge based, personal space or team space. Creating pages, blogs for each space. Addon apps such as Jira, Gitlab, Trello,\u2026 Blogs and discussion Best practice documentation template for brain storming, project planning, etc. Workspace for each department, team, system Use cases \u00b6 Setting up a knowledge base Use as an intranet Using confluence for technical documentation Template for software teams: write product requirements, release planning, create sprint retrospective and demo pages, technical and onboarding documentation\u2026 Internal Q&A Deployment options \u00b6 Cost \u00b6","title":"Why using confluence?"},{"location":"Blogs/misc/confluence/#why-using-confluence","text":"Nowadays, every company faces a problem of building knowledge-management system. Building such system is not only important for enhancing collaborations in project teams, increase productivity and efficiency of staff but also the platform for showcase its capacities to potential customers.","title":"Why using confluence?"},{"location":"Blogs/misc/confluence/#introduction","text":"","title":"Introduction"},{"location":"Blogs/misc/confluence/#concepts","text":"","title":"Concepts"},{"location":"Blogs/misc/confluence/#spaces","text":"There are three types of spaces: personal space, team space and public space.","title":"Spaces"},{"location":"Blogs/misc/confluence/#pages","text":"A page can be created within each space for documentation and so on.","title":"Pages"},{"location":"Blogs/misc/confluence/#features","text":"Create spaces for documentation, knowledge based, personal space or team space. Creating pages, blogs for each space. Addon apps such as Jira, Gitlab, Trello,\u2026 Blogs and discussion Best practice documentation template for brain storming, project planning, etc. Workspace for each department, team, system","title":"Features"},{"location":"Blogs/misc/confluence/#use-cases","text":"Setting up a knowledge base Use as an intranet Using confluence for technical documentation Template for software teams: write product requirements, release planning, create sprint retrospective and demo pages, technical and onboarding documentation\u2026 Internal Q&A","title":"Use cases"},{"location":"Blogs/misc/confluence/#deployment-options","text":"","title":"Deployment options"},{"location":"Blogs/misc/confluence/#cost","text":"","title":"Cost"},{"location":"Blogs/misc/git/","text":"Use cases of using version control software git \u00b6 What is git? \u00b6 Adding features to your software \u00b6 Create branches for develop of the software new version \u00b6 Git supports making changes on the code safely and merge them to the original code properly after verification of the new code. For this use case, we need Branching out, Making changes to development branch and Merge codes between branches. Branching off the stable master branch \u00b6 First, make sure that your local repo is pointed to master branch. Then create a new version of this branch by: git checkout -b \"branch_name\" Making changes to the new branch \u00b6 Now you can freely change or add any files to the new version without worrying about the master branch. When you are confident with all changes, you can stage and commit new/modified files to the new branch. Merge code to master branch \u00b6 To merge, we should be on the branch which we want to merge to. Since we want to add code from a new version to master, we firstly switch to master branch and run the merge command (the option -n0-ff is used to retain all commit message prior to the merge) git merge \u2013no-ff Getting back to Git Hub \u00b6 It is time to let GitHub know all the things by git push We can do some clean-up by delete the un-wanted developed branch git branch -d \"branch_name\" https://azuredevopslabs.com/labs/azuredevops/github/#:~:text=Task%201%3A%20Creating%20a%20new,new%20branch%20and%20press%20Enter .","title":"Use cases of using version control software git"},{"location":"Blogs/misc/git/#use-cases-of-using-version-control-software-git","text":"","title":"Use cases of using version control software git"},{"location":"Blogs/misc/git/#what-is-git","text":"","title":"What is git?"},{"location":"Blogs/misc/git/#adding-features-to-your-software","text":"","title":"Adding features to your software"},{"location":"Blogs/misc/git/#create-branches-for-develop-of-the-software-new-version","text":"Git supports making changes on the code safely and merge them to the original code properly after verification of the new code. For this use case, we need Branching out, Making changes to development branch and Merge codes between branches.","title":"Create branches for develop of the software new version"},{"location":"Blogs/misc/git/#branching-off-the-stable-master-branch","text":"First, make sure that your local repo is pointed to master branch. Then create a new version of this branch by: git checkout -b \"branch_name\"","title":"Branching off the stable master branch"},{"location":"Blogs/misc/git/#making-changes-to-the-new-branch","text":"Now you can freely change or add any files to the new version without worrying about the master branch. When you are confident with all changes, you can stage and commit new/modified files to the new branch.","title":"Making changes to the new branch"},{"location":"Blogs/misc/git/#merge-code-to-master-branch","text":"To merge, we should be on the branch which we want to merge to. Since we want to add code from a new version to master, we firstly switch to master branch and run the merge command (the option -n0-ff is used to retain all commit message prior to the merge) git merge \u2013no-ff","title":"Merge code to master branch"},{"location":"Blogs/misc/git/#getting-back-to-git-hub","text":"It is time to let GitHub know all the things by git push We can do some clean-up by delete the un-wanted developed branch git branch -d \"branch_name\" https://azuredevopslabs.com/labs/azuredevops/github/#:~:text=Task%201%3A%20Creating%20a%20new,new%20branch%20and%20press%20Enter .","title":"Getting back to Git Hub"},{"location":"Blogs/misc/projectManagement/","text":"Project Management Skills \u00b6 Personality \u00b6 Personality refers to ways an individual thinks, feels and acts. It defines characteristic patterns that governs his/her life. Folows are some which are the most relavent to project managers: - Authentic - Courteous - Creative - Cultural - Emotional - Intellectual - Managerial - Political - Service-oriented - Social - Systemic Dealing with people -> try to study people's behaviours and motivations. Competencies \u00b6 Technical project management Leadership Strategic and business management Project Management leadership styles \u00b6 Laissez-faire (let you do) Transactional Servant leader Transformational Charismatic Interactional Power \u00b6 Leadership and management are all about getting things done through tools or techniques which power is one of them. Various forms of power are: - Positional - Informational - Referent - Situational - Personal or charismatic - Relational - Expert - Reward-oriented - Punitice or coercive - Ingratiating - Pressure-based - Guilt-based - Persuasive - Avoiding","title":"Project Management Skills"},{"location":"Blogs/misc/projectManagement/#project-management-skills","text":"","title":"Project Management Skills"},{"location":"Blogs/misc/projectManagement/#personality","text":"Personality refers to ways an individual thinks, feels and acts. It defines characteristic patterns that governs his/her life. Folows are some which are the most relavent to project managers: - Authentic - Courteous - Creative - Cultural - Emotional - Intellectual - Managerial - Political - Service-oriented - Social - Systemic Dealing with people -> try to study people's behaviours and motivations.","title":"Personality"},{"location":"Blogs/misc/projectManagement/#competencies","text":"Technical project management Leadership Strategic and business management","title":"Competencies"},{"location":"Blogs/misc/projectManagement/#project-management-leadership-styles","text":"Laissez-faire (let you do) Transactional Servant leader Transformational Charismatic Interactional","title":"Project Management leadership styles"},{"location":"Blogs/misc/projectManagement/#power","text":"Leadership and management are all about getting things done through tools or techniques which power is one of them. Various forms of power are: - Positional - Informational - Referent - Situational - Personal or charismatic - Relational - Expert - Reward-oriented - Punitice or coercive - Ingratiating - Pressure-based - Guilt-based - Persuasive - Avoiding","title":"Power"},{"location":"Blogs/optimisation/tool/","text":"Vehicle Routing Problem \u00b6 VRP variations and applications \u00b6","title":"Vehicle Routing Problem"},{"location":"Blogs/optimisation/tool/#vehicle-routing-problem","text":"","title":"Vehicle Routing Problem"},{"location":"Blogs/optimisation/tool/#vrp-variations-and-applications","text":"","title":"VRP variations and applications"},{"location":"Tutorials/deployFlaskUbuntu/","text":"How to deploy a Flask app to Ubuntu server \u00b6 In this tutorial, we will deploy an Flask website to Ubuntu 18.04. There are some options for us to do this, however, in this guide, we adopt Nginx as a web server and uWSGI as an interface between our Flask application and Nginx. Install Nginx \u00b6 Before we can serve our Flask website, we probably need to configure our Ubuntu to accept inbound and outbound data. By seeting up basic firewall, we can allow only certain connection in order to enhace security of the server. On Ubuntu, we handle this using ufw . For instance, the code below enables only SSH connection which is sufficient to remotely connect to our Ubuntu server. ufw allow OpenSSH Install Nginx by using: sudo apt update sudo apt install nginx To allow traffic to our web server, we open port 80 by: sudo ufw allow 'Nginx HTTP' To test our installation is done properly, we enter server's IP address to a browser. Since, after we set up Ngnix, Ubuntu will start Ngnix so the web server should already be up and running. Then, we will see the defaut Ngnix page if the server is running correctly. Some crucial Nginx files and directories are (1) the web content in /var/www/html ; (2) server logs are in /var/log/nginx/access.log which records every request to our web server and /var/log/nginx/error.log for any errors occurred; (3) Configuring web server is done by modify mutiple file including /etc/nginx/nginx.conf which is the main configuration file, /etc/nginx/sites-available comprises sever block configurations and /etc/nginx/sites-enabled created linked file to sites-available directory. In case our server hosts more than one domain, we need to set up per-site server blocks. By default, Nginx servers the web content found in /var/www/html . To host other sites, we create a directory in /var/www , for instance, test.com : sudo mkdir -p /var/www/test.com/html Next, we generate a configuration file in /etc/nginx/sites-available/test.com where the root is pointed to the new created directory and server_name is our domain name. server { listen 80; listen [::]:80; root /var/www/test.com/html; index index.html index.htm index.nginx-debian.html; server_name test.com www.test.com; location / { try_files $uri $uri/ =404; } } And create a link to sites-enabled which read by Nginx when starts. sudo ln -s /etc/nginx/sites-available/test.com /etc/nginx/sites-enabled/ Finally, restart Nginx to update changes sudo systemctl restart nginx uWSGI \u00b6 WSGI(Web server Gateway interface) is a standard interface assisting an interchangable communication between a web server and our application. This is implemented by a uWSGI server which is used to convert client requests to the application. As an example, Nginx handle actual client requests and proxy them to uWSGI server, then uWSGI will forward these to application by triggering defined 'callables'. Then, the application returns an iterable that create body of client response. We install the uWSGI server into our Python environment by using pip : pip install uwsgi Setting up Flask \u00b6 Enhancing package installation by using wheel : pip install wheel Enable port 5000 for testing Flask development server sudo ufw allow 5000","title":"How to deploy a Flask app to Ubuntu server"},{"location":"Tutorials/deployFlaskUbuntu/#how-to-deploy-a-flask-app-to-ubuntu-server","text":"In this tutorial, we will deploy an Flask website to Ubuntu 18.04. There are some options for us to do this, however, in this guide, we adopt Nginx as a web server and uWSGI as an interface between our Flask application and Nginx.","title":"How to deploy a Flask app to Ubuntu server"},{"location":"Tutorials/deployFlaskUbuntu/#install-nginx","text":"Before we can serve our Flask website, we probably need to configure our Ubuntu to accept inbound and outbound data. By seeting up basic firewall, we can allow only certain connection in order to enhace security of the server. On Ubuntu, we handle this using ufw . For instance, the code below enables only SSH connection which is sufficient to remotely connect to our Ubuntu server. ufw allow OpenSSH Install Nginx by using: sudo apt update sudo apt install nginx To allow traffic to our web server, we open port 80 by: sudo ufw allow 'Nginx HTTP' To test our installation is done properly, we enter server's IP address to a browser. Since, after we set up Ngnix, Ubuntu will start Ngnix so the web server should already be up and running. Then, we will see the defaut Ngnix page if the server is running correctly. Some crucial Nginx files and directories are (1) the web content in /var/www/html ; (2) server logs are in /var/log/nginx/access.log which records every request to our web server and /var/log/nginx/error.log for any errors occurred; (3) Configuring web server is done by modify mutiple file including /etc/nginx/nginx.conf which is the main configuration file, /etc/nginx/sites-available comprises sever block configurations and /etc/nginx/sites-enabled created linked file to sites-available directory. In case our server hosts more than one domain, we need to set up per-site server blocks. By default, Nginx servers the web content found in /var/www/html . To host other sites, we create a directory in /var/www , for instance, test.com : sudo mkdir -p /var/www/test.com/html Next, we generate a configuration file in /etc/nginx/sites-available/test.com where the root is pointed to the new created directory and server_name is our domain name. server { listen 80; listen [::]:80; root /var/www/test.com/html; index index.html index.htm index.nginx-debian.html; server_name test.com www.test.com; location / { try_files $uri $uri/ =404; } } And create a link to sites-enabled which read by Nginx when starts. sudo ln -s /etc/nginx/sites-available/test.com /etc/nginx/sites-enabled/ Finally, restart Nginx to update changes sudo systemctl restart nginx","title":"Install Nginx"},{"location":"Tutorials/deployFlaskUbuntu/#uwsgi","text":"WSGI(Web server Gateway interface) is a standard interface assisting an interchangable communication between a web server and our application. This is implemented by a uWSGI server which is used to convert client requests to the application. As an example, Nginx handle actual client requests and proxy them to uWSGI server, then uWSGI will forward these to application by triggering defined 'callables'. Then, the application returns an iterable that create body of client response. We install the uWSGI server into our Python environment by using pip : pip install uwsgi","title":"uWSGI"},{"location":"Tutorials/deployFlaskUbuntu/#setting-up-flask","text":"Enhancing package installation by using wheel : pip install wheel Enable port 5000 for testing Flask development server sudo ufw allow 5000","title":"Setting up Flask"}]}